
@article{anderson_docker_2015,
	title = {Docker [{Software} engineering]},
	volume = {32},
	issn = {0740-7459},
	doi = {10.1109/MS.2015.62},
	abstract = {In episode 217 of Software Engineering Radio, host Charles Anderson talks with James Turnbull, a software developer and security specialist who's vice president of services at Docker. Lightweight Docker containers are rapidly becoming a tool for deploying microservice-based architectures.},
	number = {3},
	journal = {IEEE Software},
	author = {Anderson, C.},
	month = may,
	year = {2015},
	keywords = {Docker, Docker containers, Interviews, James Turnbull, microservices, SE Radio, Software development, Software engineering, Software Engineering Radio, Virtual machining},
	pages = {102--c3},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\marti\\Zotero\\storage\\8EQCP6EJ\\7093032.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\JS3Q78QG\\Anderson - 2015 - Docker [Software engineering].pdf:application/pdf}
}

@article{severance_inventing_2012,
	title = {Inventing {PHP}: {Rasmus} {Lerdorf}},
	volume = {45},
	issn = {0018-9162},
	shorttitle = {Inventing {PHP}},
	doi = {10.1109/MC.2012.379},
	abstract = {Unique among most of its peers, PHP wasn't conceived as a pure programming language.},
	number = {11},
	journal = {Computer},
	author = {Severance, C.},
	month = nov,
	year = {2012},
	keywords = {PHP, Programming, programming language, programming languages, authoring languages, Computer languages, Hypertext Preprocessor, object-oriented programming, open source, Rasmus Lerdorf, Web applications, Web development},
	pages = {6--7},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\marti\\Zotero\\storage\\AX948J6J\\6353442.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\D99VRDQ7\\Severance - 2012 - Inventing PHP Rasmus Lerdorf.pdf:application/pdf}
}

@book{roock_refactorings_2004,
	address = {Heidelberg},
	edition = {1. Aufl.},
	title = {Refactorings in großen {Softwareprojekten}: komplexe {Restrukturierungen} erfolgreich durchführen},
	isbn = {978-3-89864-207-1},
	shorttitle = {Refactorings in großen {Softwareprojekten}},
	language = {ger},
	publisher = {dpunkt-Verl},
	author = {Roock, Stefan},
	collaborator = {Lippert, Martin},
	year = {2004},
	keywords = {Refactoring; Refactoring}
}

@article{hoda_rise_2018,
	title = {The {Rise} and {Evolution} of {Agile} {Software} {Development}},
	volume = {35},
	issn = {0740-7459},
	doi = {10.1109/MS.2018.290111318},
	abstract = {Agile software development has dominated the second half of the past 50 years of software engineering. Retrospectives, one of the most common agile practices, enables reflection on past performance, discussion of current progress, and charting forth directions for future improvement. Because of agile's burgeoning popularity as the software development model of choice and a significant research subdomain of software engineering, it demands a retrospective of its own. This article provides a historical overview of agile's main focus areas and a holistic synthesis of its trends, their evolution over the past two decades, agile's current status, and, forecast from these, agile's likely future. This article is part of a theme issue on software engineering's 50th anniversary.},
	language = {eng},
	number = {5},
	journal = {IEEE Software},
	author = {Hoda, Rashina and Salleh, Norsaremah and Grundy, John},
	year = {2018},
	keywords = {Software Engineering ; Agile Software Development ; Market Research ; Planning ; Agile ; Agile Software Development ; Software Engineering ; Software Development ; Computer Science},
	pages = {58--63}
}

@article{lientz_characteristics_1978,
	title = {Characteristics of {Application} {Software} {Maintenance}},
	volume = {21},
	issn = {0001-0782},
	url = {http://doi.acm.org/10.1145/359511.359522},
	doi = {10.1145/359511.359522},
	abstract = {Maintenance and enhancement of application software consume a major portion of the total life cycle cost of a system. Rough estimates of the total systems and programming resources consumed range as high as 75-80 percent in each category. However, the area has been given little attention in the literature. To analyze the problems in this area a questionnaire was developed and pretested. It was then submitted to 120 organizations. Respondents totaled 69. Responses were analyzed with the SPSS statistical package. The results of the analysis indicate that: (1) maintenance and enhancement do consume much of the total resources of systems and programming groups; (2) maintenance and enhancement tend to be viewed by management as at least somewhat more important than new application software development; (3) in maintenance and enhancement, problems of a management orientation tend to be more significant than those of a technical orientation; and (4) user demands for enhancements and extension constitute the most important management problem area.},
	number = {6},
	urldate = {2019-07-08},
	journal = {Commun. ACM},
	author = {Lientz, B. P. and Swanson, E. B. and Tompkins, G. E.},
	month = jun,
	year = {1978},
	keywords = {software maintenance, management and technical issues, use of productivity aids},
	pages = {466--471}
}

@book{roock_refactorings_2004-1,
	address = {Heidelberg},
	edition = {1. Aufl.},
	title = {Refactorings in großen {Softwareprojekten}: komplexe {Restrukturierungen} erfolgreich durchführen},
	isbn = {978-3-89864-207-1},
	shorttitle = {Refactorings in großen {Softwareprojekten}},
	language = {ger},
	publisher = {dpunkt-Verl},
	author = {Roock, Stefan},
	collaborator = {Lippert, Martin},
	year = {2004},
	keywords = {Refactoring; Refactoring, Refactoring Deutsch}
}

@book{suryanarayana_refactoring_2015,
	address = {Amsterdam [u.a.]},
	title = {Refactoring for software design smells: managing technical debt},
	isbn = {978-0-12-801397-7},
	shorttitle = {Refactoring for software design smells},
	language = {eng},
	publisher = {Elsevier/Morgan Kaufmann},
	author = {Suryanarayana, Girish},
	collaborator = {Samarthyam, Ganesh and Sharma, Tushar},
	year = {2015},
	keywords = {Refactoring, Software refactoring; Software failures}
}

@book{kubeck_software-sanierung:_2009,
	address = {Heidelberg ; München ; Landsberg ; Frechen ; Hamburg},
	edition = {1. Aufl.},
	title = {Software-{Sanierung}: {Weiterentwicklung}, {Testen} und {Refactoring} bestehender {Software} ; [weiterentwickeln bestehender {Systeme} ohne vorhandene {Tests} ; bestehenden {Code} mit {Tests} absichern ; {Maßnahmen} zur {Verbesserung} der {Qualität}]},
	isbn = {978-3-8266-5072-7},
	shorttitle = {Software-{Sanierung}},
	language = {ger},
	publisher = {mitp},
	author = {Kübeck, Sebastian},
	year = {2009},
	keywords = {Sanierung, Softwaresanierung; Refactoring; Software; Testen; Software; Fehlerbehandlung; Weiterentwicklung}
}

@article{iso/iec_iso/iec/ieee_2006,
	title = {{ISO}/{IEC}/{IEEE} {International} {Standard} for {Software} {Engineering} - {Software} {Life} {Cycle} {Processes} - {Maintenance}},
	doi = {10.1109/IEEESTD.2006.235774},
	abstract = {This International Standard describes in greater detail management of the Maintenance Process described in ISO/IEC 12207, including Amendments. This International Standard also establishes definitions for the various types of maintenance. This International Standard provides guidance that applies to planning, execution and control, review and evaluation, and closure of the Maintenance Process. The scope of this International Standard includes maintenance for multiple software products with the same maintenance resources. “Maintenance” in this International Standard means software maintenance unless otherwise stated.},
	journal = {ISO/IEC 14764:2006 (E) IEEE Std 14764-2006 Revision of IEEE Std 1219-1998)},
	author = {{ISO/IEC}},
	month = sep,
	year = {2006},
	keywords = {Software engineering, software maintenance, IEEE standards, ISO, life cycle, maintenance, software},
	pages = {1--58},
	file = {2006 - ISOIECIEEE International Standard for Software E.pdf:C\:\\Users\\marti\\Zotero\\storage\\BTWQZZGY\\2006 - ISOIECIEEE International Standard for Software E.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\marti\\Zotero\\storage\\ZRHRUT9J\\1703974.html:text/html}
}

@inproceedings{kyriakakis_maintenance_2014,
	title = {Maintenance {Patterns} of {Large}-{Scale} {PHP} {Web} {Applications}},
	doi = {10.1109/ICSME.2014.60},
	abstract = {Scripting languages such as PHP have been criticized as inadequate for supporting maintenance of large-scale software projects. In this paper we attempt to provide insight into the way that five large and well-known PHP applications evolved over time. Several aspects of their history are examined including the amount of unused code, the removal of functions, the use of libraries, the stability of their interfaces, the migration to object-orientation and the evolution of complexity. The results suggest that these systems undergo systematic maintenance which is driven by targeted design decisions and evolution is by no means hindered by the underlying programming language.},
	booktitle = {2014 {IEEE} {International} {Conference} on {Software} {Maintenance} and {Evolution}},
	author = {Kyriakakis, P. and Chatzigeorgiou, A.},
	month = sep,
	year = {2014},
	keywords = {Communities, Internet, Java, Libraries, Maintenance engineering, maintenance pattern, PHP, PHP Web applications, Programming, programming language, programming languages, scripting language, scripting languages, software evolution, software libraries, software maintenance, software project maintenance, Software systems, survival analysis, web applications},
	pages = {381--390},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\marti\\Zotero\\storage\\C3PG7EDC\\6976104.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\XXQBXKVC\\Kyriakakis und Chatzigeorgiou - 2014 - Maintenance Patterns of Large-Scale PHP Web Applic.pdf:application/pdf}
}

@article{siame_evolution_2017,
	title = {Evolution of {PHP} {Applications}: {A} {Systematic} {Literature} {Review}},
	volume = {5},
	copyright = {Copyright (c) 2017 Alinaswe Siame, Douglas Kunda},
	issn = {2197-8581},
	shorttitle = {Evolution of {PHP} {Applications}},
	url = {https://online-journals.org/index.php/i-jes/article/view/6437},
	abstract = {This paper reviews, some of the research work done in the evolution of PHP applications that have been around and are vastly used. PHP is currently one of the most popular programming languages, widely used in both the open source community and in industry to build large web-focused applications and application frameworks. This review looks at how PHP applications have evolved in terms of the use of libraries, the software maturity, adoption of object-orientation paradigm, the evolution of complexity and security. The results suggest that these systems undergo systematic maintenance and evolution is helping the underlying programming language to grow.},
	language = {en},
	number = {1},
	urldate = {2019-08-15},
	journal = {International Journal of Recent Contributions from Engineering, Science \& IT (iJES)},
	author = {Siame, Alinaswe and Kunda, Douglas},
	month = mar,
	year = {2017},
	pages = {28--39},
	file = {Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\JL8P29PT\\Siame und Kunda - 2017 - Evolution of PHP Applications A Systematic Litera.pdf:application/pdf;Snapshot:C\:\\Users\\marti\\Zotero\\storage\\UDQPRUZE\\6437.html:text/html}
}

@incollection{jung_addressed_2019,
	address = {Cham},
	title = {Addressed {Challenges}},
	isbn = {978-3-030-13499-0},
	url = {https://doi.org/10.1007/978-3-030-13499-0_3},
	abstract = {In this chapter, we discuss the diverse set of challenges, from different perspectives, that we face because of our aim to incorporate knowledge in software and processes tailored for software and systems evolution. Firstly, the discovery and externalization of knowledge about requirements, the recording and representation of design decisions, and the learning from past experiences in evolution form the human perspective, including developers, operators, and users. Secondly, performance and security induce the software quality perspective. Thirdly, round-trip engineering, testing, and co-evolution define the technical perspective. And fourthly, formal methods for evolutionary changes provide the foundation and define the formal perspective.},
	language = {en},
	urldate = {2019-08-15},
	booktitle = {Managed {Software} {Evolution}},
	publisher = {Springer International Publishing},
	author = {Jung, Reiner and Märtin, Lukas and Johanssen, Jan Ole and Paech, Barbara and Lochau, Malte and Thüm, Thomas and Schneider, Kurt and Tichy, Matthias and Ulbrich, Mattias},
	editor = {Reussner, Ralf and Goedicke, Michael and Hasselbring, Wilhelm and Vogel-Heuser, Birgit and Keim, Jan and Märtin, Lukas},
	year = {2019},
	doi = {10.1007/978-3-030-13499-0_3},
	pages = {21--36},
	file = {Springer Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\AD4KSDYB\\Taentzer et al. - 2019 - The Nature of Software Evolution.pdf:application/pdf;Springer Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\28YIR8NG\\Reussner et al. - 2019 - Lessons Learned.pdf:application/pdf;Springer Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\R9PJ9CGD\\Johanssen et al. - 2019 - Tacit Knowledge in Software Evolution.pdf:application/pdf;Springer Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\CBJVUEU5\\Reussner et al. - 2019 - Introducing Managed Software Evolution.pdf:application/pdf;Springer Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\YIE33VTM\\Reussner et al. - 2019 - Future Research.pdf:application/pdf;Springer Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\DQKVFESH\\Beckert et al. - 2019 - Formal Verification of Evolutionary Changes.pdf:application/pdf;Springer Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\M3L2HAFW\\Bougouffa et al. - 2019 - Case Studies for the Community.pdf:application/pdf;Springer Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\B74XXH8V\\Thüm et al. - 2019 - Performance Analysis Strategies for Software Varia.pdf:application/pdf;Springer Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\WA7C4U46\\Jung et al. - 2019 - Addressed Challenges.pdf:application/pdf;Springer Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\XUVNZ74B\\Kleebaum et al. - 2019 - Continuous Design Decision Support.pdf:application/pdf;Springer Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\AFY9WJHN\\Bougouffa et al. - 2019 - Introduction to Case Studies.pdf:application/pdf;Springer Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\VXUWUIRH\\Lochau et al. - 2019 - Model-Based Round-Trip Engineering and Testing of .pdf:application/pdf;Springer Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\RKG3WVCV\\Kögel et al. - 2019 - Learning from Evolution for Evolution.pdf:application/pdf;Springer Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\GCMKZXNT\\Jürjens et al. - 2019 - Maintaining Security in Software Evolution.pdf:application/pdf}
}

@article{noauthor_iso/iec/ieee_2008,
	title = {{ISO}/{IEC}/{IEEE} {International} {Standard} - {Systems} and software engineering – {Software} life cycle processes},
	abstract = {This International Standard establishes a common framework for software life cycle processes, with well-defined terminology, that can be referenced by the software industry. It applies to the acquisition of systems and software products and services, to the supply, development, operation, maintenance, and disposal of software products and the software portion of a system, whether performed internally or externally to an organization. Those aspects of system definition needed to provide the context for software products and services are included. Software includes the software portion of firmware. This revision integrates ISO/IEC 12207:1995 with its two amendments and was coordinated with the parallel revision of ISO/I EC 15288:2002 (System life cycle processes) to align structure, terms, and corresponding organizational and project processes. This standard may be used stand alone or jointly with ISO/IEC 15288, and supplies a process reference model that supports process capability assessment in accordance with ISO/IEC 15504-2 (Process assessment). An annex provides support for IEEE users and describes relationships of this International Standard to IEEE standards.},
	journal = {IEEE STD 12207-2008},
	month = jan,
	year = {2008},
	keywords = {IEEE standards, maintenance, 12207-2008, acquisition, agreement, assessment, audit, configuration management, development, disposal, firmware, Formal verification, IEC standards, international standard, ISO standards, ISO/IEC 12207:1995, ISO/IEC 15288:2002, ISO/IEC 15504-2, operation, process assessment, process capability assessment, process improvement, process reference model, Product life cycle management, quality assurance, Quality assurance, retirement, software engineering, software industry, software life cycle processes, Software maintenance, software products, software services, software standards, supply, validation, verification},
	pages = {1--138},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\marti\\Zotero\\storage\\2AEM7R7B\\6042287.html:text/html}
}

@article{mancl_refactoring_2001,
	title = {Refactoring for software migration},
	volume = {39},
	issn = {0163-6804},
	doi = {10.1109/35.956119},
	abstract = {Refactoring can be an important ingredient in the strategy for development and evolution of complex telecommunications software systems. Refactoring is one way to reuse and extend a successful software system. This article presents some design tactics that will assist a development team when they choose evolution from an existing software system over building a completely new system from the ground up. Strictly speaking, the refactoring process changes only the internal design of the software. Refactoring does not add any new functionality. However, the goal of refactoring work is to pave the way for the software to be modified and extended more easily. The simplest example of redesign is the creation of simple "wrapper classes" that contain groups of functions extracted from the legacy code. More complex design patterns are also useful when attempting to improve the design. Developers usually divide the redesign work into stages so that each stage can be implemented and tested separately. This article describes a real-world example of this approach that shows how refactoring improved the design of a wireless base station controller product.},
	number = {10},
	journal = {IEEE Communications Magazine},
	author = {Mancl, D.},
	month = oct,
	year = {2001},
	keywords = {Software systems, Base stations, Buildings, Computer bugs, Control systems, Data structures, design tactics, Hardware, internal design, legacy code, object-oriented methods, radio equipment, redesign work, refactoring, Software debugging, software migration, software reusability, Team working, telecommunication computing, telecommunication control, telecommunications software systems, Testing, wireless base station controller product, wrapper classes},
	pages = {88--93},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\marti\\Zotero\\storage\\HYBQIKVT\\956119.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\B2AZ2HFR\\Mancl - 2001 - Refactoring for software migration.pdf:application/pdf}
}

@article{noauthor_software_2005,
	title = {Software {Maintenance}},
	volume = {22},
	issn = {0740-7459},
	doi = {10.1109/MS.2005.106},
	abstract = {Here is the first installment of a software engineering glossary of software maintenance terminology.},
	number = {4},
	journal = {IEEE Software},
	month = jul,
	year = {2005},
	keywords = {software maintenance, maintenance, Software maintenance, Software performance, Software testing},
	pages = {103--103},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\marti\\Zotero\\storage\\TGC4ZUY5\\1463215.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\WKH7ESHH\\2005 - Software Maintenance.pdf:application/pdf}
}

@misc{noauthor_alexa_nodate,
	title = {Alexa - {Y}2mate {Competitive} {Analysis}, {Marketing} {Mix} and {Traffic}},
	url = {https://www.alexa.com/siteinfo/y2mate.com},
	urldate = {2019-08-27},
	file = {Alexa - Y2mate Competitive Analysis, Marketing Mix and Traffic:C\:\\Users\\marti\\Zotero\\storage\\WG2YTIUL\\y2mate.html:text/html}
}

@misc{noauthor_y2mate.com_nodate,
	title = {y2mate.com {Traffic} {Statistics}},
	url = {http://similarweb.com/website/y2mate.com},
	abstract = {y2mate.com is ranked \#42 for Computers Electronics and Technology/Search Engines and \#344 Globally. Get a full report of their traffic statistics and market share.},
	language = {en},
	urldate = {2019-08-27},
	journal = {SimilarWeb},
	file = {Snapshot:C\:\\Users\\marti\\Zotero\\storage\\XZ8BGANQ\\y2mate.html:text/html}
}

@misc{php_group_php:_nodate,
	title = {{PHP}: {What} is {PHP}? - {Manual}},
	shorttitle = {{whatsPHP}},
	url = {https://www.php.net/manual/en/intro-whatis.php},
	urldate = {2019-08-26},
	author = {PHP Group},
	file = {PHP\: What is PHP? - Manual:C\:\\Users\\marti\\Zotero\\storage\\SE8YYVJZ\\intro-whatis.html:text/html}
}

@article{decan_what_2019,
	title = {What do package dependencies tell us about semantic versioning?},
	doi = {10.1109/TSE.2019.2918315},
	abstract = {The semantic versioning (semver) policy is commonly accepted by open source package management systems to inform whether new releases of software packages introduce possibly backward incompatible changes. Maintainers depending on such packages can use this information to avoid or reduce the risk of breaking changes in their own packages by specifying version constraints on their dependencies. Depending on the amount of control a package maintainer desires to have over her package dependencies, these constraints can range from very permissive to very restrictive. This article empirically compares semver compliance of four software packaging ecosystems (Cargo, npm, Packagist and Rubygems), and studies how this compliance evolves over time. We explore to what extent ecosystem-specific characteristics or policies influence the degree of compliance. We also propose an evaluation based on the "wisdom of the crowds" principle to help package maintainers decide which type of version constraints they should impose on their dependencies.},
	journal = {IEEE Transactions on Software Engineering},
	author = {Decan, A. and Mens, T.},
	year = {2019},
	keywords = {Java, Libraries, Computer bugs, D.2 Software Engineering, D.2.13 Reusable Software, D.2.13.b Reusable libraries, D.2.16 Configuration Management, D.2.16.f Software release management and delivery, D.2.7 Distribution, Maintenance, and Enhancement, D.2.7.g Maintainability, D.2.7.n Version control, D.2.8 Metrics/Measurement, Ecosystems, Packaging, Semantics, Software},
	pages = {1--1},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\marti\\Zotero\\storage\\H7LYQJB3\\8721084.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\GXNIRV6J\\Decan und Mens - 2019 - What do package dependencies tell us about semanti.pdf:application/pdf}
}

@inproceedings{raemaekers_semantic_2014,
	title = {Semantic {Versioning} versus {Breaking} {Changes}: {A} {Study} of the {Maven} {Repository}},
	shorttitle = {Semantic {Versioning} versus {Breaking} {Changes}},
	doi = {10.1109/SCAM.2014.30},
	abstract = {For users of software libraries or public programming interfaces (APIs), backward compatibility is a desirable trait. Without compatibility, library users will face increased risk and cost when upgrading their dependencies. In this study, we investigate semantic versioning, a versioning scheme which provides strict rules on major versus minor and patch releases. We analyze seven years of library release history in Maven Central, and contrast version identifiers with actual incompatibilities. We find that around one third of all releases introduce at least one breaking change, and that this figure is the same for minor and major releases, indicating that version numbers do not provide developers with information in stability of interfaces. Additionally, we find that the adherence to semantic versioning principles has only marginally increased over time. We also investigate the use of deprecation tags and find out that methods get deleted without applying deprecated tags, and methods with deprecated tags are never deleted. We conclude the paper by arguing that the adherence to semantic versioning principles should increase because it provides users of an interface with a way to determine the amount of rework that is expected when upgrading to a new version.},
	booktitle = {2014 {IEEE} 14th {International} {Working} {Conference} on {Source} {Code} {Analysis} and {Manipulation}},
	author = {Raemaekers, S. and Deursen, A. van and Visser, J.},
	month = sep,
	year = {2014},
	keywords = {Java, software libraries, configuration management, Semantics, Software, contrast version identifiers, deprecation tags, Distributed databases, Electronic mail, library release history, major patch releases, Maven Repository, minor patch releases, Semantic versioning, semantic versioning principles, Software libraries, version numbers},
	pages = {215--224},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\marti\\Zotero\\storage\\T5RBE3L3\\6975655.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\N26FRI39\\Raemaekers et al. - 2014 - Semantic Versioning versus Breaking Changes A Stu.pdf:application/pdf}
}

@misc{international_electrotechnical_commission_iec_nodate,
	title = {{IEC} - {About} the {IEC}},
	shorttitle = {{IEC}-about},
	url = {https://www.iec.ch/about/?ref=menu},
	language = {en},
	urldate = {2019-10-05},
	journal = {About the IEC},
	author = {{International Electrotechnical Commission}},
	file = {IEC - About the IEC:C\:\\Users\\marti\\Zotero\\storage\\G8BQ43JR\\about.html:text/html}
}

@misc{international_organization_for_standardization:_about_nodate,
	title = {About {ISO}},
	shorttitle = {{ISO}\_about},
	url = {http://www.iso.org/cms/render/live/en/sites/isoorg/home/about-us.html},
	language = {en},
	urldate = {2019-10-05},
	journal = {About ISO},
	author = {{International Organization for Standardization:}},
	file = {Snapshot:C\:\\Users\\marti\\Zotero\\storage\\45AJYH2E\\about-us.html:text/html}
}

@misc{php_group_php_nodate,
	title = {{PHP} {Language} {Specification}.},
	shorttitle = {php-langspec},
	url = {https://github.com/php/php-langspec/blob/master/spec/11-statements.md#the-switch-statement},
	abstract = {PHP Language Specification.},
	language = {en},
	urldate = {2019-10-04},
	journal = {GitHub},
	author = {{PHP Group}},
	collaborator = {{nikic} and {smalyshev} and {zhujinxuan} and {mousetraps}},
	file = {Snapshot:C\:\\Users\\marti\\Zotero\\storage\\TP9WRP8S\\11-statements.html:text/html}
}

@misc{php_group_php:_nodate-1,
	title = {{PHP}: {Backward} incompatible changes - {Manual} - {Changes} to variable handling},
	shorttitle = {variable\_handling},
	url = {https://www.php.net/manual/en/migration70.incompatible.php#migration70.incompatible.variable-handling},
	urldate = {2019-10-03},
	journal = {PHP: Backward incompatible changes - Manual - Changes to variable handling},
	author = {PHP Group},
	file = {PHP\: Backward incompatible changes - Manual:C\:\\Users\\marti\\Zotero\\storage\\N22YRRDN\\migration70.incompatible.html:text/html}
}

@misc{popov_php:_2014,
	title = {{PHP}: rfc:remove\_deprecated\_functionality\_in\_php7},
	shorttitle = {remove\_ereg},
	url = {https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7},
	urldate = {2019-10-03},
	author = {Popov, Nikita},
	month = sep,
	year = {2014},
	file = {PHP\: rfc\:remove_deprecated_functionality_in_php7:C\:\\Users\\marti\\Zotero\\storage\\22PS8NVB\\remove_deprecated_functionality_in_php7.html:text/html}
}

@misc{oracle_mysql_nodate,
	title = {{MySQL} :: {MySQL} 8.0 {Reference} {Manual} :: 13.5 {Prepared} {SQL} {Statement} {Syntax}},
	shorttitle = {mysql\_prep},
	url = {https://dev.mysql.com/doc/refman/8.0/en/sql-syntax-prepared-statements.html},
	urldate = {2019-10-02},
	author = {Oracle},
	file = {MySQL \:\: MySQL 8.0 Reference Manual \:\: 13.5 Prepared SQL Statement Syntax:C\:\\Users\\marti\\Zotero\\storage\\KGSD27U3\\sql-syntax-prepared-statements.html:text/html}
}

@misc{morrison_php:_2014,
	title = {{PHP}: rfc:remove\_php4\_constructors},
	shorttitle = {remove\_php4\_constructors},
	url = {https://wiki.php.net/rfc/remove_php4_constructors},
	urldate = {2019-09-30},
	author = {Morrison, Levi},
	month = nov,
	year = {2014},
	file = {PHP\: rfc\:remove_php4_constructors:C\:\\Users\\marti\\Zotero\\storage\\XBH3HM9W\\remove_php4_constructors.html:text/html}
}

@misc{morrison_php:_2014-1,
	title = {{PHP}: rfc:return\_types},
	shorttitle = {returntypes},
	url = {https://wiki.php.net/rfc/return_types},
	urldate = {2019-10-02},
	author = {Morrison, Levi},
	month = mar,
	year = {2014},
	file = {PHP\: rfc\:return_types:C\:\\Users\\marti\\Zotero\\storage\\RZEB43UU\\return_types.html:text/html}
}

@book{martin_clean_2012,
	address = {Upper Saddle River, NJ},
	edition = {[Repr.]},
	series = {Robert {C}. {Martin} series},
	title = {Clean code:  a handbook of agile software craftsmanship /},
	isbn = {978-0-13-235088-4},
	shorttitle = {Clean code},
	language = {eng},
	publisher = {: Prentice Hall},
	author = {Martin, Robert C.},
	year = {2012}
}

@misc{oracle_anonymous_nodate,
	title = {Anonymous {Classes} ({The} {Java}™ {Tutorials} {\textgreater} {Learning} the {Java} {Language} {\textgreater} {Classes} and {Objects})},
	shorttitle = {Java\_anonymousClasses},
	url = {https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html},
	urldate = {2019-10-02},
	journal = {Anonymous Classes (The Java™ Tutorials)},
	author = {Oracle},
	file = {Anonymous Classes (The Java™ Tutorials > Learning the Java Language > Classes and Objects):C\:\\Users\\marti\\Zotero\\storage\\6CDWN7BP\\anonymousclasses.html:text/html}
}

@misc{nikic_remove_2014,
	title = {Remove string category support in setlocale()},
	shorttitle = {php-src\_remove\_string},
	url = {https://github.com/php/php-src/commit/4c115b6b71e31a289d84f72f8664943497b9ee31#diff-b31234a9f5a03a328b60d0453988140f},
	abstract = {Remove string category support in setlocale()},
	language = {en},
	urldate = {2019-10-01},
	journal = {GitHub},
	author = {nikic},
	month = sep,
	year = {2014},
	file = {Snapshot:C\:\\Users\\marti\\Zotero\\storage\\BXU7AASN\\4c115b6b71e31a289d84f72f8664943497b9ee31.html:text/html}
}

@misc{php_group_php:_nodate-2,
	title = {{PHP}: {Possible} modifiers in regex patterns - {Manual}},
	shorttitle = {{PHP}\_modifiers},
	url = {https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php},
	urldate = {2019-10-01},
	author = {PHP Group},
	file = {PHP\: Possible modifiers in regex patterns - Manual:C\:\\Users\\marti\\Zotero\\storage\\2U4ZQJ3K\\reference.pcre.pattern.modifiers.html:text/html}
}

@misc{oracle_how_2004,
	title = {How and {When} to {Deprecate} {APIs}},
	url = {https://docs.oracle.com/javase/1.5.0/docs/guide/javadoc/deprecation/deprecation.html},
	urldate = {2019-09-30},
	author = {Oracle},
	year = {2004},
	file = {How and When to Deprecate APIs:C\:\\Users\\marti\\Zotero\\storage\\MDAC4XXH\\deprecation.html:text/html}
}

@book{lehman_programs_1980,
	title = {Programs, {Life} {Cycles}, and {Laws} of {Software} {Evolution}},
	shorttitle = {lifecycles},
	abstract = {By clppsitying programs according to their relationship to
the environment m which they ne executed, the paper identities the
sources of evolutionary pressure on computer rpplicitim and programs and shows why this results in a process of never ending mainte- nance activity. The resultant Life cyde processes ne then briefly discussed. The paper then introduces laws of Rognm Evdution that have
been formulated fdlowing quantitative studies of the evolution of a
number of different systems. Finally an example is pravided of the
application of Evdution Dynamics models to program release plnnning},
	author = {Lehman, Meir M.},
	year = {1980},
	file = {Citeseer - Full Text PDF:C\:\\Users\\marti\\Zotero\\storage\\LDZ5NFWR\\Background - A. The Nature of the Problem.pdf:application/pdf;Citeseer - Snapshot:C\:\\Users\\marti\\Zotero\\storage\\DMNFTVTW\\summary.html:text/html}
}

@article{fowler_refactoring_1999,
	title = {Refactoring - {Improving} the {Design} of {Existing} {Code}},
	shorttitle = {refactoring},
	language = {en},
	author = {Fowler, Martin},
	collaborator = {Beck, Kent and Brant, John},
	year = {1999},
	pages = {337},
	file = {Fowler et al. - Refactoring - Improving the Design of Existing Cod.pdf:C\:\\Users\\marti\\Zotero\\storage\\2Z62WAP3\\Fowler et al. - Refactoring - Improving the Design of Existing Cod.pdf:application/pdf}
}

@misc{preston-werner_semantic_nodate,
	title = {Semantic {Versioning} 2.0.0},
	shorttitle = {{SemVer}},
	url = {https://semver.org/},
	abstract = {Semantic Versioning spec and website},
	language = {en},
	urldate = {2019-10-21},
	journal = {Semantic Versioning},
	author = {Preston-Werner, Tom},
	file = {Snapshot:C\:\\Users\\marti\\Zotero\\storage\\DMCPG6IR\\semver.org.html:text/html}
}

@misc{faulds_php:_2014,
	title = {{PHP}: rfc:php6},
	shorttitle = {rfc:php6},
	url = {https://wiki.php.net/rfc/php6},
	urldate = {2019-10-21},
	journal = {PHP RFC: Name of Next Release of PHP},
	author = {Faulds, Andrea and Suraski, Zeev},
	month = jul,
	year = {2014},
	file = {PHP\: rfc\:php6:C\:\\Users\\marti\\Zotero\\storage\\E7B9UF49\\php6.html:text/html}
}

@misc{php_group_php:_nodate-3,
	title = {{PHP}: {History} of {PHP} - {Manual}},
	shorttitle = {history\_php},
	url = {https://www.php.net/manual/en/history.php.php},
	urldate = {2019-10-21},
	journal = {History of PHP},
	author = {{PHP Group}},
	file = {PHP\: History of PHP - Manual:C\:\\Users\\marti\\Zotero\\storage\\VNKP8WQP\\history.php.html:text/html}
}

@misc{carbonnelle_pypl_2019,
	title = {{PYPL} {PopularitY} of {Programming} {Language} index},
	shorttitle = {pypl},
	url = {http://pypl.github.io/PYPL.html},
	abstract = {PYPL popularity of programming language},
	language = {en},
	urldate = {2019-10-22},
	journal = {PYPL PopularitY of Programming Language index},
	author = {Carbonnelle, Pierre},
	month = oct,
	year = {2019},
	file = {Snapshot:C\:\\Users\\marti\\Zotero\\storage\\VBNI9QTZ\\PYPL.html:text/html}
}

@article{scheepers_virtualization_2014,
	title = {Virtualization and {Containerization} of {Application} {Infrastructure}: {A} {Comparison}},
	shorttitle = {containerization},
	abstract = {Modern cloud infrastructure uses virtualization to isolate applications, optimize the utilization of hardware resources and provide operational ﬂexibility. However, conventional virtualization comes at the cost of resource overhead.},
	language = {en},
	author = {Scheepers, Thijs},
	year = {2014},
	pages = {7},
	file = {Scheepers - Virtualization and Containerization of Application.pdf:C\:\\Users\\marti\\Zotero\\storage\\6FTVZRNL\\Scheepers - Virtualization and Containerization of Application.pdf:application/pdf}
}

@misc{php_group_php:_nodate-4,
	title = {{PHP}: {Magic} {Quotes} - {Manual}},
	shorttitle = {magic\_quotes},
	url = {https://www.php.net/manual/en/security.magicquotes.php},
	urldate = {2019-10-24},
	journal = {Security: Magic Quotes},
	author = {{PHP Group}},
	file = {PHP\: Magic Quotes - Manual:C\:\\Users\\marti\\Zotero\\storage\\KJJUHGBE\\security.magicquotes.html:text/html}
}

@misc{php_group_php:_nodate-5,
	title = {{PHP}: {Objects} and references - {Manual}},
	shorttitle = {php\_references},
	url = {https://www.php.net/manual/en/language.oop5.references.php},
	urldate = {2019-10-29},
	journal = {Objects and references},
	author = {{PHP Group}},
	file = {PHP\: Objects and references - Manual:C\:\\Users\\marti\\Zotero\\storage\\RKLITLUP\\language.oop5.references.html:text/html}
}

@book{schmidt_pattern-oriented_2000,
	address = {Chichester [England] ; New York},
	series = {Wiley series in software design patterns},
	title = {Pattern-oriented software architecture},
	isbn = {978-0-471-60695-6},
	language = {en},
	publisher = {Wiley},
	editor = {Schmidt, Douglas C. and Buschmann, Frank and Henney, Kevlin},
	year = {2000},
	keywords = {Software architecture, Software patterns},
	file = {Schmidt et al. - 2000 - Pattern-oriented software architecture.pdf:C\:\\Users\\marti\\Zotero\\storage\\DADA7G3Z\\Schmidt et al. - 2000 - Pattern-oriented software architecture.pdf:application/pdf}
}

@inproceedings{schmidt_pattern-oriented_2000-1,
	title = {Pattern-{Oriented} {Software} {Architecture}: {Patterns} for {Concurrent} and {Networked} {Objects}},
	shorttitle = {Pattern-{Oriented} {Software} {Architecture}},
	abstract = {From the Publisher: 
Designing application and middleware software to run in concurrent and networked environments is a significant challenge to software developers. The patterns catalogued in this second volume of Pattern-Oriented Software Architectures (POSA) form the basis of a pattern language that addresses issues associated with concurrency and networking. 
The book presents 17 interrelated patterns ranging from idioms through architectural designs. They cover core elements of building concurrent and network systems: service access and configuration, event handling, synchronization, 
and concurrency. All patterns present extensive examples and known uses in multiple programming languages, including C++, C, and Java. 
The book can be used to tackle specific software development problems or read from cover to cover to provide a fundamental understanding of the best practices for constructing concurrent and networked applications and middleware. 
About the Authors 
This book has been written by the award winning team responsible for the first POSA volume "A System of Patterns", joined in this volume by Douglas C. Schmidt from University of California, Irvine (UCI), USA. 
Visit our Web Page},
	author = {Schmidt, Douglas C. and Stal, Michael and Rohnert, Hans and Buschmann, Frank},
	year = {2000},
	keywords = {Software architecture}
}

@misc{php_group_php:_nodate-6,
	title = {{PHP}: phpng},
	shorttitle = {phpng},
	url = {https://wiki.php.net/phpng#performance_evaluation},
	urldate = {2019-12-31},
	journal = {phpng},
	author = {{PHP Group}},
	file = {PHP\: phpng:C\:\\Users\\marti\\Zotero\\storage\\XFB7CWYJ\\phpng.html:text/html}
}